리팩터링 (마틴파울러)

이 책 또한 옆에 두고두고 필요할 때마다 꺼내봐야할 책 순위권이다.
어느 정도 원칙들에 대해서 들어본 적도 있고 얼추 알고는 있지만 실천하는 것은 다른 문제인 것 같다.
그래서 이후로 개발을 할 때는 이 책이 두고두고 생각날 것 같고, 그 때마다 
이번 정리한 것을 참고하고, 그래도 안 되면 검색, 그래도 안 된다면 책을 꼭 사야할 것 같다.

프로젝트를 하다가, 처음으로 코드의 재사용성을 고려한 개발을 진행하고 있는데, 그때마다 나의 생각에 확신이 들지 않아서
이 책을 반드시 읽어야겠다고 생각했다.
많은 도움, 특히 좋은 기준점을 찾게 되어서 다행이라고 생각한다.

 
2장. 리팩터링 원칙

- 리팩터링의 뜻
소프트웨어의 겉보기 동작은 그대로 유지한 채, 여러가지 리팩터링 기법을 적용해서 소프트웨어를 재구성하는 것.

- 리팩터링은 성능을 좋게 만드는 것이 목적이 아니다.
리팩터링의 목적은 코드를 이해하고 수정하기 쉽게 만드는 것이다.
성능 최적화와는 거리가 멀다.

- 리팩터링의 장점
1. 소프트웨어 설계가 좋아진다.
2. 소프웨어를 이해하기 쉬워진다.
3. 버그를 쉽게 찾을 수 있다.
4. 프로그래밍 속도를 높일 수 있다.

- 3의 법칙(3 strike rule)
1. 처음에는 그냥 한다.
2. 비슷한 일을 만나면 일단은 진행한다.
3. 비슷한 일을 세 번째 만나는 순간 리팩터링 한다.

- 리팩터링은 계획된 과정이 아닌 수시로 하는 과정이 되어야 한다.

- 리팩터링을 하지 말아야 할 때
1. 지저분해도 굳이 수정할 필요가 없다면 하지 않는다.
2. 처음부터 새로 작성하는 것이 쉬울 때도 하지 않는다.

- 리팩터링은 도덕적 실천 문화가 아닌 경제적이고 실용적인 도구이다.

- 레거시 코드를 해결할 때 보통 리팩터링을 하게 된다.
이때는 프로그램에서 테스트를 추가할 틈새를 찾아서 시스템을 테스트해야 한다.
그리고 자주 보이는 부분을 우선적으로 리팩터링한다.

- YAGNI(You aren't going to need it)
설계를 처음부터 빡세게 적용하지 말고, 점진적으로 변경해나가자는 설계.
아키텍처의 변경을 리팩터링을 뒷받침하여 유연하게 진행한다.
처음에 정해진 아키텍쳐들은 언제든 바뀔 가능성이 크기 때문에 염두해두고 리팩터링을 하며 개발한다.

- 테스트코드 + 지속적 통합(CI) + 리팩터링 + YAGNI

- 리팩터링을 하면 소프트웨어는 느려질 수 있지만, 성능 튜닝을 하기는 더 쉬워질 것이다.
1. 리팩터링을 하면 성능 튜닝에 집중할 시간을 벌 수 있다.
2. 리팩터링이 잘 되어 있는 시스템은 성능을 더 세밀하게 분석할 수 있다.

======================================================================
3장. 코드에서 나는 악취
- 기이한 이름
- 중복 코드
- 긴 함수
- 긴 매개변수 목록
- 전역변수
- 가변데이터
- 뒤엉킨 변경: 기능을 추가/수정하는데 여러 부분을 고쳐야하는 경우
- 기능 편애: 프로그램은 영역 안에서 상호작용을 늘리고, 영역 간의 상호작용은 줄이는 것이 좋은데
                     이에 맞지 않게 자기보다 다른 것을 더 많이 사용하는 것을 말한다.
- 데이터 뭉치: 데이터 필드 여러개가 뭉쳐다니는 상황
- 기본형 집착: 기본형을 사용하는 것에 대한 집착(int, String 등)
- 반복되는 switch문
- 반복문
- 성의 없는 요소: 굳이 클래스/인터페이스를 남용하는 경우
- 추측성 일반화: 너무 예민하게 미래를 대비하는 코드
- 임시 필드
- 메시지 체인: 한 객체로부터 getter를 너무 여러번 호출하는 것.
- 중개자: 지나친 위임
- 내부자 거래
- 거대한 클래스
- 서로 다른 인터페이스의 대안 클래스들
- 데이터 클래스
- 상속 포기
- 주석

======================================================================
6장. 기본적인 리팩터링

- 함수 추출하기
'특정 로직 단위를 static 함수로 빼낸다.'
주로 함수가 길 때 나눌 때 많이 사용한다.
이것은 해당 행동을 메서드 이름을 설명할 수 있어, 어떤 행동을 하는지 파악하는 데에 도움이 된다.
대신 이름 짓기에 신경을 잘 써야 한다.

반환할 값이 여러개라면 묷어서 반환하는 것도 괜찮지만,
각 반환을 하는 함수 여러 개를 만드는 것도 괜찮다.

- 함수 인라인하기
'변수 선언 -> 선언된 변수 사용을 하는 것이 아닌 선언과 동시에 사용하는 법'

- 변수 추출하기(함수 인라인하기와 반대)
'복잡한 표현식을 명확한 이름을 가진 변수를 이용해서 대체해주는 방법'
ex) (do something) + (do something2) * (do something3)
   => d1 + d2 * d3(이름은 자세하게 설정) 

- 함수 선언 바꾸기
'함수 이름 명확하게 바꾸기', '매개변수 추가/제거'

- 변수 캡슐화하기
'getter, setter를 이용하기'
getter를 이용할 때는 특히 필드가 변경될 수 있는 것들은 복제본을 반환해주는 것도 좋다.

- 변수 이름 바꾸기
'명확한 이름짓기'

- 매개변수 객체 만들기
'여러 개의 매개 변수를 하나의 클래스로 묶기'

- 여러 함수를 클래스로 묶기
'공통 데이터를 중심으로 엮여 작동하는 함수를 하나의 클래스로 묶기'
비슷한 작업이 많아지면 클래스로 묶고 데이터도 캡슐화를 해서 쓰자.

- 여러 함수를 변환 함수로 묶기
'어떤 값을 여러 번 변환해야할 경우 그것을 하나의 함수에서 모아서 처리하기'

- 단계 쪼개기
'긴 함수를 여러 단계의 메서드로 쪼개서 관리하는 방법'

======================================================================
7장. 캡슐화
- 레코드 캡슐화하기
'json 같은 레코드 파일들을 클래스로 캡슐화해서 쓸 것'

- 컬렉션 캡슐화하기
'컬렉션을 직접 다루게 하지 말고, add-remove 등을 메서드로 호출하도록 하기'

- 기본형을 객체로 바꾸기
'특정 도메인 변수를 String 같은 것으로 쓰지 말고 객체로 만들기'
예를 들면 전화번호를 그냥 String으로 쓰기보다는, PhoneNumber 객체로 바꿔서 쓸 것.
나중에 기능 추가에 효과적이다.

- 임시 변수를 질의 함수로 바꾸기
int c = a*b 이거를 
static int getC(int a, int b){ return a* b; }  이런식으로 바꾸는 것이다.

- 클래스 추출하기
'하나의 클래스가 너무 많은 역할을 처리할 때, 이것을 다른 클래스로 나누어 처리하는 것'
사람 클래스의 내부 필드 중에 전화번호가 있는데, 여기에서 처리할 것이 많고
사람 클래스가 복잡한 상황이라면, 전화번호를 다른 클래스로 빼는 것이 좋다.

- 클래스 인라인하기 (<=> 클래스 추출하기)
'클래스가 나뉠 필요가 없을 때 합치는 것' 
위의 개념과 반대다.
굳이 쓸모가 없는 클래스를 나눌 필요는 없다.

- 위임 숨기기
'클라이언트가 어떤 메서드를 사용할 때 그 내부 구조를 몰라도 호출할 수 있도록 하는 것'
클라이언트는 어떤 필드의 내부 객체를 호출할 때 그 내부를 알아야할 필요가 없다.
그리고 알면 안 된다.
그래서 사용하려면 그 내부에 접근할 수 있는 메서드를 만들어 준다.

- 중개자 제거하기 (<=> 위임 숨기기)
'중개자를 너무 자주 호출할 경우에는 직접 호출할 수 있도록 한다.'
굳이 가리기엔 너무 자주 호출하는 상황이라면 숨기지 않는 것이 좋을 수도 있다.
위의 위임 숨기기와 상황에 맞게 판단해야 한다.

- 알고리즘 교체하기
'알고리즘 자체를 바꾸는 것도 리팩토링이다'
전체적인 동작 로직 자체를 바꾸는 것

======================================================================
8장. 기능 이동
- 함수 옮기기
'자신이 속한 모듈 A의 요소들보다 다른 모듈 B의 요소들을 더 많이 참조한다면 B로 옮겨줘야 한다'
더욱 어울리는 위치로 함수를 옮겨주자.
어디가 맞다고 정할 수가 없기 때문에, 여러가지로 시도해보면서 익히자.

- 필드 옮기기
'데이터 구조의 위치, 즉 필드의 위치를 적절한 클래스에 잘 잡아줘야 한다.'
제대로 자리잡지 않으면 데이터를 여러 번 갱신해야 할 것이다.

- 문장을 함수로 옮기기
string 문장, html 문장 등 스트링 같은 것들을 다룰 때는 함수로 따로 빼내서 처리하는 것이 좋다.
stringbuffer 같은 것을 쓸 때 쓰면 좋을 것 같다.

- 문장을 호출한 곳으로 옮기기(<=>위와 반대)
만약에 위의 상황의 함수가 기능상 나뉘어져야할 경우에는 해당 기능별로 다시 원래 호출 위치로
옮겨야 할 필요가 있다.

- 인라인 코드를 함수 호출로 바꾸기

- 문장 슬라이드하기
'관련 코드들은 가까이 모으기'

- 반복문 쪼개기
'반복문 하나에서 굳이 여러 개를 하려고 하지말고, 여러 반복문으로 나눠라'
이해가 되는게, 확장 측면에서는 나눠 놓는 것이 더 좋은 것 같다.

- 반복문을 파이프라인으로 바꾸기
'반복문을 stream/람다로 바꿔서 사용해라'

- 죽은 코드 제거하기
'사용하지 않는 코드는 지워라'
어차피 버젼 관리로 살리면 된다. 커밋을 자주 해서 살려놓기.

======================================================================
9장. 데이터 조직화
- 변수 쪼개기
'한 변수가 여러 번의 역할을 하게 하지 말 것'
a = 3, a = 5 이런 식으로 변하게 하지 말라. 새로운 변수를 만들어라

- 필드 이름 바꾸기
'필드 이름을 제대로 바꾸기'
아무래도 바꾸다가 실수하는 경우가 있어서 있는 것 같다.
intellij 에서는 문제가 없음~

- 파생 변수를 질의 함수로 바꾸기
'데이터를 매번 바뀌는 변수가 아니라, 불변할 수 있도록 바꿔야 한다.'
즉 int a = b + c; return a 로 하여 매번 바꾸도록 하지 말고, return b+c; 같은 식으로 하라는 것이다.

- 참조를 값으로 바꾸기
'내부 객체를 참조하게 하지 말고, 직접 객체 자체를 넣어 줘라'
어떤 객체 A의 setter를 쓸 때, 고치고자 하는 객체의 setter를 쓰는 게 아니라 객체 자체를 new로 넣어준다.
이것은 불변성을 지키기 위한 방법이다.

- 값을 참조로 바꾸기 (<=> 위와 반대)
'new 객체 자체를 넣지 말고, getter로 얻은 값을 전달해줘라'
이건 위와 다르게 불변성이 아닌, 참조로 무엇인가를 해야할 때 사용하는 방법이다.

- 매직 리터럴 바꾸기
ENUM 써라.

======================================================================
10장. 조건부 로직 간소화
- 조건문 분해하기
'if문 안에 있는 복잡한 조건들을 함수로 따로 빼라'
boolean static 함수로 나눠라

- 중복 조건식 통합하기
'중복된 if문 여러개를 하나로 합칠 수 있다면 합쳐라'

- 중첩 조건문을 보호 구문으로 바꾸기
'한쪽만 정상이라면 비정상 조건을 if에서 검사한 다음 조건이 참이면 함수에서 빠져나오는 것을 보호 
구문이라고 한다.'
if(a) return 1; (정상 종료 조건)
if(b) return 2; (정상 종료 조건)
return 3;    요런 식으로 될 수 있도록 한다.

- 조건부 로직을 다형성으로 바꾸기
'switch, if문을 다형성으로 상속을 해서 분기를 나눠버리기'

- 특이 케이스 추가하기
'null값을 가지는 객체의 경우 새로운 객체를 만들어서 처리하라'
예를 들어 어떤 고객을 찾았는데 해당 고객이 없을 경우 원래는 예외를 던지지만,
던지지 않는 경우가 있고 그냥 진행할 경우가 있다. 이럴 때는 고객 이름을 '최초가입자' 이런 것보다는
그냥 최초가입자용 객체를 하나 더 만들어서 팩토리 등으로 반환해서 사용하는 방법이다.

- Assertion 추가하기
'assertion은 어떠한 상태임을 보여주는 소통 도구로서의 측면, 그리고 디버깅 측면으로서의 쓰임새가 있다.'

- 제어 플래그를 탈출문으로 바꾸기
'플래그를 쓰느니 break나 return을 해서 웬만하면 빼내라'

======================================================================
11장. API 리팩터링
- 질의 함수와 변경 함수 분리하기
'상태를 변경하는 부분과 질의하는 부분을 분리하라'

- 함수 매개변수화하기
'여러 함수가 하나의 리터럴만 다르다면 그냥 합치고 매개변수화하라'

- 플래그 인수 제거하기
'플래그를 주고 뭘 하려고 하지말고 그냥 두 개를 만들어라'
예를 들어 어떤 함수가 void functionA((ENUM형)Type type, String data) 가 있다고 했을 때
타입 별로 내부적으로 동작이 다른 것을 수행하도록 되어있는 게 있는데,
이렇게 하지 말고, 이것을 두 개로 나누는 것이 낫다.

- 객체 통째로 넘기기
'매개 변수로 여러 개를 넘겨 줄 때 객체를 넘기는 것이 나을 경우가 있다'

- 매개변수를 질의 함수로 바꾸기
'굳이 줄일 수 있는 매개변수를 늘려서 줄 이유가 없다'

- 질의 함수를 매개변수로 바꾸기
'변수를 전역변수처럼 갖다 쓰지 말고, 매개변수로 넣어줘라'
예를 들어 필드의 this.a를 바로 쓰는 것 보다는, a를 직접 매개변수에 넣어주는 것이다.
이는 불변클래스로 사용할 수 있다는 장점이 있다.

- 세터 제거하기
'굳이 없어도 되는 상황이라면 없애는 것이 좋다.'
만약 없어도 되는 상황이면 명확하게 조건을 제거해주는 것이다.

- 생성자를 팩터리 함수로 바꾸기
'생성자보단 팩터리 함수를 쓰자'

- 함수를 명령으로 바꾸기
'함수를 자신만을 위한 객체로 만들고 거기에다가 run(), execute()같은 하나의 메서드로 동작하게 한다.'
이건 평범한 함수보다 유연하게 함수를 제어하고 표현할 수 있다.
일급함수를 지원하지 않을 때도 비슷하게 흉내낼 수 있다(자바)

- 명령을 함수로 바꾸기(<=>위와 반대)
'그러나 위의 방법을 굳이 간단한 것에 쓸 필요는 없다. 그냥 함수로 써라 간단한건.'

- 수정된 값 반환하기
'데이터를 직접 밖에서 접근해서 가져다 사용하지 말고, 매개변수로 받고 반환해서 사용해라'

- 오류 코드를 예외로 바꾸기
'웬만하면 언어에 지정된 예외를 써라'

- 예외를 사전 확인으로 바꾸기
'예외를 과용하지는 말자. 호출 전에 검사할 수 있는 예외상황은 조건으로 검사해준다.'

======================================================================
12장. 상속 다루기
- 메서드 올리기
'상속된 클래스들이 비슷한 것을 한다면, 슈퍼클래스에 공통 메서드를 선언해준다'

- 필드 올리기
'상속된 클래스에 비슷한 역할의 변수가 있다면, 슈퍼클래스에 공통 변수로 선언해준다'
자바는 안 되는 것 같다. 상수만 되는듯

- 생성자 본문 올리기
'생성자도 공통되면 올린다. 복잡하니까 팩토리 메서드를 쓰는 것도 괜찮다'

- 메서드 내리기
'일부 자식 클래스와만 관련 있는 메서드는 내린다.'

- 필드 내리기
'일부 자식 클래스에만 사용하는 필드는 내린다.'

- 타입 코드를 서브클래스로 바꾸기
'타입 enum을 필드에서 쓰는 것보다는, 서브 클래스로 나누는 것이 낫다'

- 서브 클래스 제거하기(<=> 위와 반대)
'더 이상 복잡한 구조가 필요하지 않다면, 서브클래스를 지우고 타입 enum 등을 쓰는 게 낫다.'

- 슈퍼 클래스 추출하기
'비슷한 일을 하는 두 클래스가 보이면 공통 부분을 슈퍼 클래스로 옮겨 담을 수 있다.'

- 계층 합치기
'굳이 부모와 독립적으로 존재할 필요가 없는 클래스는 다시 합쳐준다'

- 서브클래스를 위임으로 바꾸기
'위임은 상속의 단점을 해결해준다.'
상속보다는 컴포지션을 이용하라는 것은 유명한 말이다.
자식 클래스를 만들어서 그걸 쓰는 것도 있지만, 
상속을 안 하고 대신 위임 클래스를 만들고, 그것을 자신의 필드로 저장한 뒤 사용하는 방법이 있다.
즉 슈퍼클래스는 자신의 필드에 위임 클래스를 저장하고 그것으로 기능을 사용한다.

- 슈퍼클래스를 위임으로 바꾸기
이번 개념은 위에 개념과 반대가 아니다.
상속을 적용하면 상위 클래스의 모든 메서드를 활용해야 하지만 그렇지 않은 경우가 있다.
이런 혼란스러운 상황을 위임으로 해결할 수 있다.
위의 경우에는 위임 클래스는 상위 클래스를 자신의 필드로 지정한 다음,
그 필드를 가지고 자신만의 메서드를 만들어주면 된다.



