클린 코드

물론 책에서 말하는 내용은 이것들보다는 많지만,
주로 내가 실용적으로 기억할만한 것들만 넣어놨다.
이 책을 읽으면서 느끼는 점은 언젠가 개발을 하다가 이 책을 봤을 때,
지금 읽은 것과는 다른 느낌으로 이 책을 보리라 라는 생각이 든다.

1. 깨끗한 코드
- 나쁜 코드는 생산성을 떨어뜨린다.
- 깨끗한 코드는 문학작품처럼 잘 읽히는 코드다.
- 깨끗한 코드는 모든 테스트를 통과한다.

2. 의미 있는 이름
- 의도를 밝히기 쉽게
- 이름은 알기 쉽게
- 이상한 글자 넣지 말고!!

3. 함수
- 작게 만들어라
- 한 가지만 해라
- 파라미터도 웬만하면 줄여라
- 중복의 해결로는 템플릿메서드, Strategy 패턴을 이용하면 좋다.

4. 주석
- 주석은 없을수록 좋은 코드이긴 하다.
- 그러나 필요하면 넣는 것이 좋다.
- 웬만하면 넣으면 가독성이 떨어진다. 코드를 좋게 만들어라. 

5. 형식 맞추기
- 가로-세로 둘 다 적당히 길이를 맞춰라(길지 않게)

6. 객체와 자료 구조
- 객체는 내부를 감춰라
- 상수는 enum을 사용해라.

7. 오류 처리
- try-catch를 써라
- 외부 예외는 자신의 어플리케이션에 맞게 바꿔서 정의해서 써라

9. 단위 테스트
- 테스트 당 assert는 적은 게 좋은 것 같다(고 저자는 생각한다고 한다.)
- 테스트는 항상 중요하다!
- 자세한 내용은 TDD 내용이다.
- 빌드, 테스트는 한 단계로 끝내라.

10. 클래스
- 단일 책임 원칙을 유지할 것
- 응집도 있게 유지할 것 -> 클래스를 쪼개라

11. 시스템
- 팩토리, 의존성 주입을 이용하여 사용해라(나는 스프링을 쓰겠다)
- AOP, Proxy를 사용하라(이것도 스프링...)
- 설정 정보는 최상위에 둬라.

12. 창발성
- 모든 테스트를 실행하라
- 리팩터링
- 프로그래머의 의도를 분명히 표현하라. 코드로.
- 클래스와 메서드의 수를 줄여라(웬만하면)

13. 동시성
- 동기화 코드는 최소한으로 만들어라
- 공유자원을 최대한 줄여라

