실용주의 프로그래머(앤드류헌트, 데이비드토마스)

- 실용주의 프로그래머의 특징
1. 얼리어답터 성향/새로운 것에 빠르게 적응하는 성향
2. 캐묻기 좋아한다.
3. 비판적인 사고의 소유자
4. 현실적이다.
5. 다방면의 기술에 익숙하다.

=====================================================================================
1장. 실용주의 철학
- 책임지고 할 수 있는 최대한을 해라.
- 깨진 유리창을 빨리 고쳐라. 
- 어떤 것을 시작할 때 먼저 변화의 시작이 되어라. 그 다음 주변에게 부탁하라. 
- 완벽한 개발보다 적당히 괜찮은 개발이 더 나을 수 있다.
  완벽은 불가능하다. 지나칠정도로 다듬다가 망치지 말라.
- 컴퓨터 지식 투자에 대한 교훈
1. 여러 가지 기술들의 등장에 대하여 알아라. 최신 트렌드 숙지
2. 투자 포트폴리오처럼, 하나의 기술에 크게 집중하지 말아라. 
3. 투자처럼 얼리어답터가 되면 나중에 값이 올랐을 때 얻는 이득이 많다.
4. 매년 새로운 언어를 최소 하나는 배워라(나는 kotlin, js를 배울 예정.)
5. 기술 서적을 분기마다 하나씩 읽어라
6. 비 기술 서적도 읽어라
7. 수업을 들어라
8. 지역 사용자 모임에 참여하라
9. 다른 환경에서 실험해보라(OS, 에디터 등)
10. 모든 기술을 비판적으로 보라.

=====================================================================================
2장. 실용주의 접근법
- 중복의 해악: 중복은 대체로 유지보수에서 문제가 생긴다. 하나를 바꾸려면 중복된 모든 곳에서 바꿔야하는 경우도
  있다. 이런 유지보수적인 측면 등에서 중복은 줄일 수 있을 때 줄이는 것이 미리 문제를 해결하는 방법이다.
- 직교성: 관련 없는 것들 간에는 서로 영향이 없도록 하라. 각자가 명확한 책임을 가진다면 테스트와 기능 추가할 때
  기본적으로 이전 것을 고려할 필요가 없어 생산성이 증가한다. 이것은 프로젝트팀에서도, 여러 모듈 간에도 적용된다.
- 가역성: 최종 결정은 없다. 언제든 바뀔 수 있음을 고려하여 개발하기. 예를들어 DB커넥션을 언제든지 바꿔낄 수 있도록
  개발하기
- 예광탄: 처음부터 끝까지 동작하는 뼈대 만들어서 보여주기. 이런 틀을 통해 사용자와 다른 개발자들 모두 개발에 필요한
  토대를 얻게 된다.
- 프로토타입: 프로토타입을 통해 학습하라.

=====================================================================================
3장. 기본적인 도구
- 지식을 일반 테스트로 저장하라
- 명령어 셸을 공부하고 활용하라
- Ide, Git을 잘 사용하라
- 디버깅을 당황해하지 말고, 분석하고 해결하기.
- 코드를 작성하는 코드를 만들어라. 

=====================================================================================
4장. 실용주의 편집증
- 완벽한 소프트웨어는 만들 수 없다.
- 계약에 따른 설계를 하라
- 일찍 작동을 멈추게 하라.
- 예외는 예외적인 상황에 사용하라
이번 장은 아무래도 예전 소프트웨어 작성 방법과 연관이 많은 듯하다.
물론 내가 보기에 얼마나 알겠느냐마는 제대로 이해가 되지 않아서 적당히 읽고 넘긴다.
또한 자바 언어 자체가 위의 특징들에 적용되지 않는 것이 있어서 가볍게 보았다.

=====================================================================================
5장. 구부러지거나 부러지거나
- 디미터 함수 법칙: 모듈간 결합도를 최소화하라
- 코드에는 추상화를, 메타데이터(설정)에는 세부 내용을.
- UML을 이용해 동시성을 개선하기. 
- 모델에서 뷰를 분리하라.

=====================================================================================
6장. 코딩하는 동안 해야 할 일들
- 우연에 맡기는 프로그래밍을 하지 마라
1) 자기가 무엇을 하고 있는지 알아야 한다.
2) 맹목적으로 코딩하지 말라. 완전하게 이해하면서 사용해라
3) 계획을 세우고 바탕으로 진행해라
4) 신뢰할 수 있는 것에만 기대라
5) 여러분의 가정을 문서로 남겨라
6) 코드만 테스트할 것이 아니라 세운 가정도 테스트하라.
7) 노력을 기울일 대상의 우선순위를 정해라
8) 과거의 노예가 되지 말라. 레거시 코드가 이후의 코드에 영향을 미치지 않도록 하라
- 알고리즘의 차수를 추정하라
- 일찍 리팩터링하고, 자주 리팩터링하라.
- 테스트를 염두해놓고 설계하라

=====================================================================================
7장. 프로젝트 전에
- 요구사항을 채굴하라.(열심히 그 내부의 의미를 파악하라)
- 사용자처럼 생각하기 위해 사용자와 함께 일하라. 
- 어떤 일들은 설명하기보다 실제로 하는 것이 쉽다.
- 형식적 방법의 노예가 되지 마라. 

=====================================================================================
8장. 실용주의 프로젝트
- 수작업 절차를 사용하지 마라: 자동화를 시켜라.
- 일찍 테스트하고, 자주 테스트하라. 자동으로 테스트하라.
- 모든 테스트가 통과하기 전엔 코딩이 다 된 게 아니다.
- 문서가 전체의 일부가 되게 하고, 나중에 집어넣으려고 하지 말라.
- 자신의 작품에 서명하라. 즉 자신의 코드에 책임을 져라.

=====================================================================================
<책을 읽은 소감>
확실히 내용이 옛날 소프트웨어 환경이라는 점은 다소 이질적이지만 지금과 본질은 크게 차이가 있나 싶다.
실용주의 프로그래머는 지금까지 축적되어온 개발자들의 노하우를 알고 실천하는 사람인 것 같다.
비즈니스적인 측면에서, 사람적인 측면에서 개발자를 설명한 책은 처음 읽어봤다.
그래서 좀 신기하고 적용할만한 점이 있다고 생각한다. 
대부분의 내용들이 현대 프로그래밍들에서 강조하고 있는 점들로 이루어져있다는 점 때문인지,
다들 어디서 많이 봐왔던 것들이다. 아마도 이 책의 영향을 받아서 굳어진 이론들도 많은 것이라고 예상이 된다.
개발자 베스트셀러로서 읽으면서 당연히 알고 가야 할 것들을 다시 한 번 되새길 수 있게 되었다.













